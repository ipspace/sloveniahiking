#!/usr/bin/env python3
#
import cm.read
import cm.write
import cm.traverse
import wc.data_update

from wc.config import config
import sys
import os
import yaml
import argparse
import readline

def parse_cli():
  parser = argparse.ArgumentParser(description='Update hike data based on a template')
  parser.add_argument('data', nargs='*',action='store',help='Data file(s) to fix')
  parser.add_argument('-x',dest='x',action='store',help='Select hikes by X (min,max)')
  parser.add_argument('-y',dest='y',action='store',help='Select hikes by Y (min,max)')
  parser.add_argument('--skip',dest='skip',action='append',help='Skip hikes with this parameter')
  parser.add_argument('--update',dest='update',action='store_true',help='Update hikes selected by bounding box')
  parser.add_argument('--template','-t',dest='template',action='store', \
    default="hikes-template.yaml", \
    help='Data template')
  return parser.parse_args()

def update_hike_data(page_name=None,template=None):
  page = cm.read.page(page_name)
  page_yaml = yaml.dump(page)
  parent = None
  parent_name = os.path.dirname(page_name)+"/../_"+os.path.basename(page_name)
  if os.path.exists(parent_name):
    parent = cm.read.page(parent_name)

  print("\n\nUpdating %s" % page_name)
  print("=" * 80)
  wc.data_update.update_items(page,parent,template)

  if yaml.dump(page) != page_yaml:
    print("Changed data, updating data file...")
    cm.write.create_output_file(data=page,file_path=page_name)

def check_box(path,template,x_min=None,x_max=None,y_min=None,y_max=None):
  page = cm.read.page(path)
  if x_min and page.get('x',0) < x_min:
    return
  if x_max and page.get('x',9999) > x_max:
    return
  if y_min and page.get('y',0) < y_min:
    return
  if y_max and page.get('y',9999) > y_max:
    return
  print("Page %s selected by the bounding box (%d,%d)" % (path,page.get('x'),page.get('y')))
  if args.skip:
    for skip_value in args.skip:
      if page.get(skip_value):
        print(".. parameter %s is set, skipping" % skip_value)
        return
  if args.update:
    update_hike_data(path,template)

def update_hike_box(x,y,template):
  x_min = None
  x_max = None
  if x:
    x_min = int(x.split(',')[0])
    x_max = int(x.split(',')[1])

  y_min = None
  y_max = None
  if y:
    y_min = int(y.split(',')[0])
    y_max = int(y.split(',')[1])

  print("Selecting hikes in the bounding box %d/%d to %d/%d" % (x_min,y_min,x_max,y_max))
  cm.traverse.walk(config['ExFilePath'],r'index\.md$',lambda path: check_box(path,template,x_min,x_max,y_min,y_max))

args = parse_cli()
template = wc.data_update.read_template(args.template,search_path=[os.path.dirname(__file__)])

if args.data:
  for page_name in args.data:
    update_hike_data(page_name,template)
elif args.x or args.y:
  update_hike_box(args.x,args.y,template)
